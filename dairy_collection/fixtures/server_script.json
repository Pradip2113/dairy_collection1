[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-03-18 11:26:43.891207",
  "module": "quantdairy",
  "name": "Set Party Name",
  "reference_doctype": "Journal Entry",
  "script": "\r\n\r\nfor account in doc.get('accounts'):\r\n    if account.party:\r\n        if account.party_type == \"Customer\":\r\n            party_name = frappe.db.get_value(\"Customer\", {\"name\": account.party}, 'customer_name')\r\n        elif account.party_type == \"Supplier\":\r\n            party_name = frappe.db.get_value(\"Supplier\", {\"name\": account.party}, 'supplier_name')\r\n        elif account.party_type == \"Employee\":\r\n            party_name = frappe.db.get_value(\"Employee\", {\"name\": account.party}, 'employee_name')\r\n        else:\r\n            party_name = frappe.db.get_value(\"Shareholder\", {\"name\": account.party}, 'title')\r\n        if party_name:\r\n            # frappe.throw(party_name)\r\n            account.party_name = party_name\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# if doc.voucher_type in ['Sales Invoice', 'Purchase Invoice','Payment Entry'] and doc.voucher_no:\r\n#     if(doc.voucher_type == 'Sales Invoice'):\r\n#         party_name = frappe.db.get_value(doc.voucher_type, doc.voucher_no, 'customer_name')\r\n#     elif(doc.voucher_type == 'Payment Entry'):\r\n#         party_name = frappe.db.get_value(doc.voucher_type, doc.voucher_no, 'party_name')\r\n#     else:\r\n#         party_name = frappe.db.get_value(doc.voucher_type, doc.voucher_no, 'supplier_name')\r\n        \r\n#     doc.custom_party_name = party_name\r\n    \r\n    \r\n    \r\n    \r\n  ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-03-18 11:27:38.096715",
  "module": "quantdairy",
  "name": "Set Party Name in Bulk Payment Entry Details",
  "reference_doctype": "Bulk Payment Entry",
  "script": "for account in doc.get('bulk_payment_entry_details'):\r\n    if account.party:\r\n        if account.party_type == \"Customer\":\r\n            party_name = frappe.db.get_value(\"Customer\", {\"name\": account.party}, 'customer_name')\r\n        elif account.party_type == \"Supplier\":\r\n            party_name = frappe.db.get_value(\"Supplier\", {\"name\": account.party}, 'supplier_name')\r\n        elif account.party_type == \"Employee\":\r\n            party_name = frappe.db.get_value(\"Employee\", {\"name\": account.party}, 'employee_name')\r\n        else:\r\n            party_name = frappe.db.get_value(\"Shareholder\", {\"name\": account.party}, 'title')\r\n        if party_name:\r\n            # frappe.throw(party_name)\r\n            account.party_name = party_name",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-03-18 14:11:35.472016",
  "module": "Accounts",
  "name": "Set",
  "reference_doctype": "GL Entry",
  "script": "if doc.party:\n    if doc.party_type == \"Customer\":\n        party_name = frappe.db.get_value(\"Customer\", {\"name\": doc.party}, 'customer_name')\n    elif doc.party_type == \"Supplier\":\n        party_name = frappe.db.get_value(\"Supplier\", {\"name\": doc.party}, 'supplier_name')\n    elif doc.party_type == \"Employee\":\n        party_name = frappe.db.get_value(\"Employee\", {\"name\": doc.party}, 'employee_name')\n    else:\n        party_name = frappe.db.get_value(\"Shareholder\", {\"name\": doc.party}, 'title')\n    if party_name:\n        # frappe.throw(party_name)\n        doc.custom_party_name = party_name\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-10-29 11:26:13.060973",
  "module": null,
  "name": "Stock Reorder Pop Up",
  "reference_doctype": "Sales Invoice",
  "script": "mr_doc = frappe.new_doc(\"Material Request\")\r\n\r\n# Initialize a list to hold items that meet the condition\r\nitems_to_append = []\r\n\r\nfor i in doc.get(\"items\"):\r\n    if i.item_code and i.warehouse and i.actual_qty:\r\n        minimum_qty = frappe.db.get_all('Item Reorder', filters={'parent': i.item_code, 'warehouse': i.warehouse}, fields=['warehouse_reorder_level', 'warehouse_reorder_qty'])\r\n        if minimum_qty and minimum_qty[0]['warehouse_reorder_level'] == i.actual_qty:\r\n            frappe.msgprint(\"Material Request Generated ! You Reached Your Reordered Level Value for Item: \" + str(i.item_code) + \" - \" + str(i.item_name), indicator='orange', title='Warning')\r\n            items_to_append.append({\r\n                \"item_code\": i.item_code,\r\n                \"schedule_date\": doc.posting_date,\r\n                \"qty\": minimum_qty[0]['warehouse_reorder_qty'],\r\n                \"warehouse\": i.warehouse,\r\n            })\r\n\r\n# Append items to the Material Request document\r\nfor item in items_to_append:\r\n    mr_doc.append(\"items\", item)\r\n\r\n# If there are items to be appended\r\nif items_to_append:\r\n    mr_doc.insert()\r\n    mr_doc.save()\r\n\r\n    # After saving the Material Request, notify the user\r\n    matreqdoc = frappe.db.get_all(\"Material Request\", fields=[\"name\"], order_by=\"creation DESC\", limit=1)\r\n    matreqdoc_doc = matreqdoc[0].name\r\n    \r\n    users = frappe.get_all(\"User\", filters={\"email\": [\"in\", [\"purvi.ved@erpdata.in\",\"sonali.kinikar@eprdata.in\",\"tejal.kumbhar@erpdata.in\", \"deepak@bastardairyfarm.com\", \"imrangd@bastardairyfarm.com\", \"shivam@bastardairyfarm.com\", \"gulzar@bastardairyfarm.com\", \"purchase@bastardairyfarm.com\", \"imran@bastardairyfarm.com\"]]}, fields=[\"name\"])\r\n    # frappe.throw(str(users))\r\n    for user in users:\r\n        # frappe.throw(str(user))\r\n        notification_log = frappe.new_doc('Notification Log')\r\n        notification_log.subject = 'Required Material Request done'\r\n        notification_log.message = 'Material Request created'\r\n        notification_log.status = 'Open'\r\n        notification_log.document_type = 'Material Request'\r\n        notification_log.document_name = matreqdoc_doc\r\n        notification_log.for_user = user.name\r\n        notification_log.insert(ignore_permissions=True)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-04-17 16:18:39.783597",
  "module": "quantdairy",
  "name": "Reorder Notification Pop Up",
  "reference_doctype": "Stock Entry",
  "script": "mr_doc = frappe.new_doc(\"Material Request\")\r\n\r\n# Initialize a list to hold items that meet the condition\r\nitems_to_append = []\r\n\r\nfor i in doc.get(\"items\"):\r\n  \r\n    if i.item_code and i.s_warehouse and i.actual_qty:\r\n        \r\n        minimum_qty = frappe.db.get_all('Item Reorder', filters={'parent': i.item_code, 'warehouse': i.s_warehouse}, fields=['warehouse_reorder_level', 'warehouse_reorder_qty'])\r\n        \r\n        if minimum_qty and minimum_qty[0]['warehouse_reorder_level'] == i.actual_qty:\r\n            frappe.msgprint(\"Material Request Generated ! You Reached Your Reordered Level Value for Item: \" + str(i.item_code) + \" - \" + str(i.item_name), indicator='orange', title='Warning')\r\n            items_to_append.append({\r\n                \"item_code\": i.item_code,\r\n                \"schedule_date\": doc.posting_date,\r\n                \"qty\": minimum_qty[0]['warehouse_reorder_qty'],\r\n                \"warehouse\": i.s_warehouse,\r\n            })\r\n\r\n# Append items to the Material Request document\r\nfor item in items_to_append:\r\n    mr_doc.append(\"items\", item)\r\n\r\n# If there are items to be appended\r\nif items_to_append:\r\n    mr_doc.insert()\r\n    mr_doc.save()\r\n\r\n    # After saving the Material Request, notify the user\r\n    matreqdoc = frappe.db.get_all(\"Material Request\", fields=[\"name\"], order_by=\"creation DESC\", limit=1)\r\n    matreqdoc_doc = matreqdoc[0].name\r\n    \r\n    users = frappe.get_all(\"User\", filters={\"email\": [\"in\", [\"sonali.kinikar@eprdata.in\",\"tejal.kumbhar@erpdata.in\", \"deepak@bastardairyfarm.com\", \"imrangd@bastardairyfarm.com\", \"shivam@bastardairyfarm.com\", \"gulzar@bastardairyfarm.com\", \"purchase@bastardairyfarm.com\", \"imran@bastardairyfarm.com\"]]}, fields=[\"name\"])\r\n\r\n    for user in users:\r\n        notification_log = frappe.new_doc('Notification Log')\r\n        notification_log.subject = 'Required Material Request done'\r\n        notification_log.message = 'Material Request created'\r\n        notification_log.status = 'Open'\r\n        notification_log.document_type = 'Material Request'\r\n        notification_log.document_name = matreqdoc_doc\r\n        notification_log.for_user = user.name\r\n        notification_log.insert(ignore_permissions=True)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-09-20 15:22:31.524071",
  "module": null,
  "name": "Sales Invoice Lock",
  "reference_doctype": "Sales Invoice",
  "script": "\ndairy_details = frappe.get_doc(\"Dairy Settings\")\n\ninvoice_morning_shift = dairy_details.invoice_morning\ninvoice_controller = dairy_details.invoice_controller\ninvoice_evening_shift = dairy_details.invoice_evening_shift\n\nposting_date = doc.posting_date\nposting_time = doc.posting_time\n\n# frappe.throw(str(invoice_morning_shift))\ntodaydate = frappe.utils.today()\n# frappe.throw(str(todaydate))\ncurrent_user_id = frappe.session.user\n# frappe.throw(current_user_id)\nroles = frappe.get_all(\"Has Role\",{'parent':current_user_id},[\"role\"])\nif roles:\n    for i in roles:\n        if i.role != invoice_controller:\n            if posting_date == todaydate:\n                # frappe.msgprint(\"hii match\")\n                if doc.delivery_shift == \"Morning\":\n                    if posting_time > invoice_morning_shift:\n                        frappe.throw(\"Lock Invoice !! You Exceed Invoice Submitting Time\")\n                elif doc.delivery_shift == \"Evening\":\n                    if posting_time > invoice_evening_shift:\n                        frappe.throw(\"Lock Invoice !! You Exceed Invoice Submitting Time\")\n                else:\n                    pass\n# current_datetime = frappe.utils.now()\n",
  "script_type": "DocType Event"
 }
]